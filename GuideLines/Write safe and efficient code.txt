One advantage to using value types is that they often avoid heap allocations. 
The disadvantage is that they're copied by value. This tradeoff makes it harder to optimize algorithms that operate on large amounts of data.

-Declare a readonly struct to express that a type is immutable and enables the compiler to save copies when using in parameters.
-Use a ref readonly return when the return value is a struct larger than IntPtr.Size and the storage lifetime is greater than the method returning the value.
-When the size of a readonly struct is bigger than IntPtr.Size, you should pass it as an in parameter for performance reasons.
-Never pass a struct as an in parameter unless it's declared with the readonly modifier because it may negatively affect performance and could lead to an obscure behavior.
-Use a ref struct, or a readonly ref struct such as Span<T> or ReadOnlySpan<T> to work with memory as a sequence of bytes.